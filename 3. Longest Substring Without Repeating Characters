import java.util.HashSet;
import java.util.Scanner;

public class LongestPalindromicSubstring
{
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String s = scn.nextLine();
        String ans = longestPalindrome(s);
        System.out.println(ans);
        scn.close();
    }

    public static String longestPalindrome(String s) 
    {
        if(s.length() == 1)
        { 
            return Character.toString(s.charAt(0));
        }
        HashSet<Character> set = new HashSet<Character>();
        for(Character c : s.toCharArray())
        {
            set.add(c);
        }
        
        if(set.size() == 1)
        {
            return checking(set , s);
        }
        String ans = " ";
        for(int i = 0; i < s.length(); i++)
        {
            for(int j = s.length() - 1; j > i ; j--)
            {
                if(s.charAt(i) == s.charAt(j))
                {
                    if(check(s.substring(i , j+1)))
                    {
                        ans = s.substring(i , j+1);
                    }
                }
            }
        }
        if(ans == " ")
        {
            return Character.toString(s.charAt(0));
        }
        return ans ;
    }

    public static boolean check(String s)
    {
        boolean flag = true;
        for(int i = 0; i < s.length(); i++)
        {
            if(s.charAt(i) != s.charAt(s.length() - i -  1))
            {
                flag = false;
            }
        }
        return flag;
    }

    public static String checking(HashSet<Character> set , String s)
    {
        int b = 0;
        for(Character a : set)
        {
            if(a == s.charAt(b))
            {
                b++;
            }
        }
        return s;
    }
}
